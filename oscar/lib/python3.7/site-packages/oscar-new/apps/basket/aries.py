import json
from lib2to3.pgen2 import token
import threading
import subprocess
import time
from django.db import connection
import requests
import os.path
from django.conf import settings


host = settings.REST_ARIES['HOST']
port = settings.REST_ARIES['PORT']
wallet_prefix = settings.REST_ARIES['WALLET_PREFIX']
wallet_webhook_urls = settings.REST_ARIES['WALLET_WEBHOOK_URLS']
wallet_pass = settings.REST_ARIES['WALLET_PASS']
serviceEndpoint = settings.REST_ARIES['SERVICEENDPOINT']
endpoint = host + ":" + port
issuer = settings.BADGR['ISSUER']
badge_class = settings.BADGR['BADGE_CLASS']
user_badgr = settings.BADGR['USER']
pass_badgr = settings.BADGR['PASSWORD']
endpoint_badgr = settings.BADGR['HOST'] + ":" + settings.BADGR['PORT']



def get_wallet_id(email_user):
    #Check if subwallet in Hyperledger Aries exist
    connection = None
    did = None

    try:
        response = requests.get(
            endpoint
            + "/multitenancy/wallets?wallet_name=" + wallet_prefix + "." + email_user,
        )
        response.raise_for_status()
        connection = response.json()
        did = connection["results"][0]["wallet_id"]

    except:
        raise
    finally:
        return did


def get_token_aries(wallet_id):
    #Check if subwallet in Hyperledger Aries exist        
    value = None
    connection = None
    token = None

    try:
        response = requests.post(
            endpoint
            + "/multitenancy/wallet/" + wallet_id + "/token",
        )
        response.raise_for_status()
        connection = response.json()
        token = connection["token"]

    except:
        raise
    finally:
        return token


def check_code(email_user, code):
    wallet_id = get_wallet_id(email_user)
    token = get_token_aries(wallet_id)
    status = None
    thread_id = None
    resp = None
    code = code.lower()
     
    header = {'Authorization': 'Bearer ' + token, 'accept': 'application/json', 'Content-Type': 'application/ld+json'}
    
    try:
        response = requests.get(
            endpoint
            + "/issue-credential-2.0/records?state=done&thread_id=" + code,
            headers=header
        )
        response.raise_for_status()
        resp = response.json()
        thread_id = resp['results'][0]['cred_ex_record']['thread_id']

    except:
        raise
    finally:
        return thread_id